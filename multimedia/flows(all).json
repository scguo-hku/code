[
    {
        "id": "5c4d021625f6fb1a",
        "type": "tab",
        "label": "流程 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ecc26120.5c01a8",
        "type": "mongodb3",
        "uri": "mongodb://localhost:27017",
        "name": "HKO",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "9621b87f506e1830",
        "type": "ui_group",
        "name": "",
        "tab": "fb678cab6c07d002",
        "order": 1,
        "disp": true,
        "width": "28",
        "collapse": false
    },
    {
        "id": "442e50534e7c4c73",
        "type": "ui_group",
        "name": "停车场信息及数据统计",
        "tab": "5ea1eb793c2ec491",
        "order": 1,
        "disp": true,
        "width": "28",
        "collapse": false
    },
    {
        "id": "fb678cab6c07d002",
        "type": "ui_tab",
        "name": "地图",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5ea1eb793c2ec491",
        "type": "ui_tab",
        "name": "信息",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2bc31fa5e4845845",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "hk",
                "default": "#4B7930",
                "baseColor": "#ffffff",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "0c56e229b1215d68",
        "type": "inject",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "7b992ad7622330ba"
            ]
        ]
    },
    {
        "id": "7b992ad7622330ba",
        "type": "http request",
        "z": "5c4d021625f6fb1a",
        "name": "http request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.csdi.gov.hk/apim/dataquery/api/?id=td_rcd_1638948197838_85279&layer=basic_info_all&limit=150&offset=0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "11c3a77ca6debce0"
            ]
        ]
    },
    {
        "id": "a58bfe5851f3b43b",
        "type": "mongodb3 in",
        "z": "5c4d021625f6fb1a",
        "service": "_ext_",
        "configNode": "ecc26120.5c01a8",
        "name": "",
        "collection": "Parking",
        "operation": "insert",
        "x": 730,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "11e0fe75fcc49916",
        "type": "inject",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "660",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 150,
        "wires": [
            [
                "5c13fcc4bb5d3656"
            ]
        ]
    },
    {
        "id": "0ccd7133f60c6609",
        "type": "mongodb3 in",
        "z": "5c4d021625f6fb1a",
        "service": "_ext_",
        "configNode": "ecc26120.5c01a8",
        "name": "",
        "collection": "Parking",
        "operation": "findOne",
        "x": 210,
        "y": 250,
        "wires": [
            [
                "4940b964d77088ea",
                "4a66d8f400ef462c",
                "61813ba10ed0788d",
                "3ac3652f8447aabc",
                "ce77f36b1947e48d"
            ]
        ]
    },
    {
        "id": "5c13fcc4bb5d3656",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "查询条件时间降序",
        "func": "msg.payload = [\n    {\n        \"$query\": {}\n    },\n    {\n        \"sort\": {\n            \"timeStamp\": -1\n        }\n    }\n]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 200,
        "wires": [
            [
                "0ccd7133f60c6609"
            ]
        ]
    },
    {
        "id": "11c3a77ca6debce0",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "改日期类型",
        "func": "if(msg.payload && msg.payload.timeStamp) {\n    msg.payload.timeStamp = new Date(msg.payload.timeStamp);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 80,
        "wires": [
            [
                "a58bfe5851f3b43b"
            ]
        ]
    },
    {
        "id": "4940b964d77088ea",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获得坐标",
        "func": "const features = msg.payload.features;\nvar coordinatesArray = [];\nfor (var i = 0; i < features.length; i++) {\n    const coordinates = features[i].geometry.coordinates;\n    coordinatesArray.push({\n        longitude: coordinates[0],\n        latitude: coordinates[1]\n    });\n}\nmsg.payload = coordinatesArray;\nmsg.topic = \"coordinates\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "de32b4696e971a17"
            ]
        ]
    },
    {
        "id": "4a66d8f400ef462c",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获取停车场名称",
        "func": "const features = msg.payload.features;\nvar namesArray = [];\nfor (var i = 0; i < features.length; i++) {\n    const properties = features[i].properties;\n    namesArray.push({\n        parknames: properties.name_sc,\n        districts: properties.district_sc,\n        displayAddress: properties.displayAddress_sc   \n    });\n}\nmsg.payload = namesArray;\nmsg.topic = \"names\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "de32b4696e971a17"
            ]
        ]
    },
    {
        "id": "de32b4696e971a17",
        "type": "join",
        "z": "5c4d021625f6fb1a",
        "name": "消息合并",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "e57a9ff7f2e3f7ba",
                "960c881bb1be2bcf",
                "c1e2bbaff53e1705"
            ]
        ]
    },
    {
        "id": "e57a9ff7f2e3f7ba",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "停车场信息",
        "func": "\nlet time =msg.payload.time;\nlet coordinates = msg.payload.coordinates;\nlet names = msg.payload.names;\nlet vacancyInf = msg.payload.vacancyInf;\nlet links = msg.payload.links;\nconst vehicleTypes = {\n    \"C\": \"公共汽车\",\n    \"L\": \"轻型货车\",\n    \"H\": \"重型货车\",\n    \"M\": \"摩托车\",\n    \"P\": \"汽车/货车\",\n    \"T\": \"集装箱车\",\n    \"B\": \"小巴\"\n};\nlet mapMessages = coordinates.map((coord, index) => {\n    let vacancyDetails = [];\n    let totalVacancy = 0;\n\n    if (vacancyInf[index]) {\n        vacancyInf[index].forEach(vacancy => {\n            if (vacancy.vacancy >= 0 && vacancy.vehicle_type) {\n                let vehicleTypeName = vehicleTypes[vacancy.vehicle_type];\n                vacancyDetails.push(`${vehicleTypeName} - ${vacancy.vacancy}个空余车位`);\n                totalVacancy += vacancy.vacancy;\n            }\n        });\n    }\n\n    let iconColor = \"gray\";\n    if (vacancyDetails.length != 0){\n        if (totalVacancy >= 50) {\n            iconColor = \"green\";\n        } else if (totalVacancy > 0 && totalVacancy < 50) {\n            iconColor = \"orange\";\n        } else if (totalVacancy == 0) {\n            iconColor = \"red\";\n        }        \n    }\n\n    let districtInfo = `<strong>${names[index].districts}</strong>`\n    let vacancyMessage = vacancyDetails.length > 0 ? vacancyDetails.join('<br>') : \"暂无数据\";\n    let websiteLink = links[index].website_tc ? `<a href='${links[index].website_tc}' target='_blank'>查看详情</a>` : \"无官网信息\";\n    let photoLink = links[index].carpark_photo ? `<img src='${links[index].carpark_photo}' alt='停车场图片' style='width:100%; max-width:300px;'>` : \"\";\n\n    return {\n        \"name\": names[index].parknames,\n        \"lat\": coord.latitude,\n        \"lon\": coord.longitude,\n        \"layer\": \"Parking\",\n        \"icon\": \"car\",\n        \"iconColor\": iconColor,\n        \"popup\": `<br>${districtInfo}<br><br>${photoLink}<br>剩余车位：</b><br><pre>${vacancyMessage}</pre>更新时间：${time}<br>${websiteLink}`,\n    };\n});\n\nreturn [mapMessages.map(msg => { return { payload: msg }; })];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "f7ce3fcb8c656310"
            ]
        ]
    },
    {
        "id": "f7ce3fcb8c656310",
        "type": "worldmap",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "lat": "22.28",
        "lon": "114.19",
        "zoom": "12",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,RW",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1100,
        "y": 340,
        "wires": []
    },
    {
        "id": "61813ba10ed0788d",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "车位信息",
        "func": "const features = msg.payload.features;\nvar vacancyArray = [];\nfor (var i = 0; i < features.length; i++) {\n    const names = features[i].properties.vacancy_url;\n    vacancyArray.push(names);\n}\nmsg.url = vacancyArray;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "27495ad4e2e03aa4"
            ]
        ]
    },
    {
        "id": "27495ad4e2e03aa4",
        "type": "split",
        "z": "5c4d021625f6fb1a",
        "name": "vacancy_url处理队列",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "url",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "8faaef7510e3ccba"
            ]
        ]
    },
    {
        "id": "8faaef7510e3ccba",
        "type": "http request",
        "z": "5c4d021625f6fb1a",
        "name": "http request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "4d3387bf7e3aaa5d"
            ]
        ]
    },
    {
        "id": "4d3387bf7e3aaa5d",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获取车位信息",
        "func": "// 检查并移除可能的 BOM 字符\nif (msg.payload.charCodeAt(0) === 0xFEFF) {\n    msg.payload = msg.payload.substr(1);\n}\n\n\nmsg.payload = JSON.parse(msg.payload);\n\n\nvar carParks = msg.payload.car_park;\nvar vacancies = [];\n\ncarParks.forEach(function (carPark) {\n    carPark.vehicle_type.forEach(function (vehicle) {\n        vehicle.service_category.forEach(function (category) {\n            var vacancyInfo = {\n                park_id: carPark.park_id,\n                vehicle_type: vehicle.type,\n                category: category.category,\n                vacancy_type: category.vacancy_type,\n                vacancy: category.vacancy,\n                lastupdate: category.lastupdate\n            };\n            vacancies.push(vacancyInfo);\n        });\n    });\n});\n\nmsg.payload = vacancies;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 470,
        "wires": [
            [
                "c5faaaad01e6aa14"
            ]
        ]
    },
    {
        "id": "3ac3652f8447aabc",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "当前时间",
        "func": "var timeStampDate = new Date(msg.payload.timeStamp);\nvar targetTimeZoneOffset = 8;\nvar utcOffset = -timeStampDate.getTimezoneOffset() / 60;\n\ntimeStampDate.setHours(timeStampDate.getHours() + targetTimeZoneOffset - utcOffset);\n\nvar dateString = timeStampDate.toISOString().substring(0, 10);\nvar timeString = timeStampDate.toTimeString().substring(0, 8);\n\nvar update = dateString + \" \" + timeString;\n\nmsg.payload = update;\nmsg.topic = \"time\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "de32b4696e971a17"
            ]
        ]
    },
    {
        "id": "c5faaaad01e6aa14",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "顺序合并",
        "func": "let messageList = flow.get('messageList') || [];\n\nmessageList.push(msg);\n\nlet totalMessages = msg.parts.count;\n\nif (messageList.length === totalMessages) {\n    messageList.sort((a, b) => a.parts.index - b.parts.index);\n\n    msg.payload = messageList.map(item => item.payload);\n\n    flow.set('messageList', []);\n\n    return msg;\n} else {\n    flow.set('messageList', messageList);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 510,
        "wires": [
            [
                "8018e686350a9131"
            ]
        ]
    },
    {
        "id": "ce77f36b1947e48d",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获取链接",
        "func": "const features = msg.payload.features;\nvar linksArray = [];\nfor (var i = 0; i < features.length; i++) {\n    const properties = features[i].properties;\n    linksArray.push({\n        website_tc: properties.website_tc, \n        carpark_photo: properties.carpark_photo\n    });\n}\n\nmsg.payload = linksArray;\nmsg.topic = \"links\";890\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "de32b4696e971a17"
            ]
        ]
    },
    {
        "id": "0a8d80bbdf2f3566",
        "type": "ui_template",
        "z": "5c4d021625f6fb1a",
        "group": "9621b87f506e1830",
        "name": "嵌入Worldmap",
        "order": 1,
        "width": "28",
        "height": "12",
        "format": "<style>\n    html,\n    body,\n    .nr-dashboard-cardcontainer {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n\n    iframe {\n        width: 100%;\n        height: 100%;\n        border: none;\n    }\n</style>\n<iframe src=\"/worldmap\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1120,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c1e2bbaff53e1705",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "格式化数据",
        "func": "let time = msg.payload.time;\nlet coordinates = msg.payload.coordinates;\nlet names = msg.payload.names;\nlet vacancyInf = msg.payload.vacancyInf;\nlet links = msg.payload.links;\nconst vehicleTypes = {\n    \"C\": \"公共汽车\",\n    \"L\": \"轻型货车\",\n    \"H\": \"重型货车\",\n    \"M\": \"摩托车\",\n    \"P\": \"汽车/货车\",\n    \"T\": \"集装箱车\",\n    \"B\": \"小巴\"\n};\n\nlet tableData = coordinates.map((coord, index) => {\n    let vacancyDetails = [];\n    let totalVacancy = 0;\n\n    if (vacancyInf[index]) {\n        vacancyInf[index].forEach(vacancy => {\n            if (vacancy.vacancy >= 0 && vacancy.vehicle_type) {\n                let vehicleTypeName = vehicleTypes[vacancy.vehicle_type];\n                vacancyDetails.push(`${vehicleTypeName} - ${vacancy.vacancy}个空余车位`);\n                totalVacancy += vacancy.vacancy;\n            }\n        });\n    }\n\n    let vacancyMessage = vacancyDetails.length > 0 ? vacancyDetails.join('   ') : \"暂无数据\";\n    let websiteLink = links[index].website_tc ? links[index].website_tc : \"无官网信息\";\n\n    return {\n        name: names[index].parknames,\n        district: names[index].districts,\n        vacancyMessage: vacancyMessage,\n        displayAddress_sc: names[index].displayAddress,\n        photo: links[index].carpark_photo,\n        websiteLink: websiteLink,\n        time: time\n    };\n});\n\nmsg.payload = tableData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "a2ab542d2b42899a",
                "e9b49c427f607428"
            ]
        ]
    },
    {
        "id": "a2ab542d2b42899a",
        "type": "ui_template",
        "z": "5c4d021625f6fb1a",
        "group": "442e50534e7c4c73",
        "name": "停车场信息",
        "order": 1,
        "width": "12",
        "height": "12",
        "format": "<div style='padding: 10px;'>\n    <input type='text' id='searchInput' placeholder='Search...' class='fixed-search-box'>\n    <div ng-repeat='item in filteredItems = (msg.payload | filter:searchText)' style='border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; border-radius: 5px;'>\n        <h3 style='margin: 0;'>{{item.name}}</h3>\n        <p style='margin: 5px 0;'>{{item.district}} - {{item.displayAddress_sc}}</p>\n        <div style='margin-top: 10px;'>\n            <img ng-src='{{item.photo}}' alt='停车场照片' style='width:100px;height:auto;'>\n        </div>\n        <p style='margin: 5px 0;'>剩余车位：{{item.vacancyMessage}}</p>\n        <p ng-if=\"item.websiteLink.startsWith('http')\">\n            <a ng-href=\"{{item.websiteLink}}\" target=\"_blank\" class=\"custom-link\">查看详情</a>\n        </p>\n        <p ng-if=\"!item.websiteLink.startsWith('http')\">\n            {{item.websiteLink}}\n        </p>\n        <p style='margin: 5px 0;'>更新时间：{{item.time}}</p>\n    </div>\n</div>\n\n<style>\n    .custom-link {\n        color: #33FFFF;\n        /* 自定义链接颜色 */\n        text-decoration: none;\n    }\n\n    .custom-link:hover {\n        color: #c70039;\n        /* 自定义链接悬停颜色 */\n    }\n\n    .fixed-search-box {\n    position: fixed;\n    top: 14px;\n    right: 10px;\n    z-index: 1000;\n    background-color: white;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 10px; /* 圆角 */\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    }\n    \n    .fixed-search-box input {\n    border-radius: 5px; /* 输入框圆角 */\n    padding: 5px;\n    border: 1px solid #ccc;\n    }\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal) {\n            scope.filteredItems = newVal;\n        }\n    });\n    document.getElementById('searchInput').addEventListener('input', function() {\n        scope.$apply(function() {\n            scope.searchText = document.getElementById('searchInput').value;\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 930,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8018e686350a9131",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "加topic信息",
        "func": "msg.topic = \"vacancyInf\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 550,
        "wires": [
            [
                "de32b4696e971a17"
            ]
        ]
    },
    {
        "id": "960c881bb1be2bcf",
        "type": "debug",
        "z": "5c4d021625f6fb1a",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 380,
        "wires": []
    },
    {
        "id": "e9b49c427f607428",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "各区域统计",
        "func": "let data = msg.payload;\n\n// Function to extract total vacancy from vacancyMessage\nfunction extractTotalVacancy(vacancyMessage) {\n    let totalVacancy = 0;\n    let parts = vacancyMessage.split('个空余车位');\n    for (let part of parts) {\n        if (part) {\n            let count = parseInt(part.split(' - ')[1]);\n            totalVacancy += count;\n        }\n    }\n    return totalVacancy;\n}\n\n// Calculate total vacancies for each district\nlet districtVacancies = {};\nfor (let item of data) {\n    let district = item.district;\n    let vacancyMessage = item.vacancyMessage;\n    let totalVacancy = extractTotalVacancy(vacancyMessage);\n\n    if (totalVacancy > 0) {\n        if (district in districtVacancies) {\n            districtVacancies[district] += totalVacancy;\n        } else {\n            districtVacancies[district] = totalVacancy;\n        }\n    }\n}\n\n// Prepare data for pie chart\nlet labels = [];\nlet values = [];\nfor (let district in districtVacancies) {\n    if (districtVacancies[district] > 0) {\n        labels.push(district);\n        values.push(districtVacancies[district]);\n    }\n}\n\nmsg.payload = \n    [{ \n    series: [\"剩余车位\"], \n    labels: labels, \n    data: [values], \n    }];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 620,
        "wires": [
            [
                "68c01756a70d08f0",
                "8601c3d3477580b8",
                "62326bab67c75c36"
            ]
        ]
    },
    {
        "id": "68c01756a70d08f0",
        "type": "ui_chart",
        "z": "5c4d021625f6fb1a",
        "name": "各区域停车场空位统计",
        "group": "442e50534e7c4c73",
        "order": 1,
        "width": "8",
        "height": "9",
        "label": "各区域停车场空位统计",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e32400",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 960,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5c97ce41727fedcf",
        "type": "debug",
        "z": "5c4d021625f6fb1a",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 760,
        "wires": []
    },
    {
        "id": "62326bab67c75c36",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "最多空位",
        "func": "let data = msg.payload[0]; // 获取上一个节点返回的数据\n\n// 提取标签和数据\nlet labels = data.labels;\nlet values = data.data[0];\n\n// 将标签和数据组合成一个数组\nlet combined = labels.map((label, index) => {\n    return { label: label, value: values[index] };\n});\n\n// 按值降序排序并取前五个\ncombined.sort((a, b) => b.value - a.value);\nlet topFive = combined.slice(0, 5);\n\n// 准备输出数据\nlet topLabels = topFive.map(item => item.label);\nlet topValues = topFive.map(item => item.value);\n\nmsg.payload = [{\n    series: [\"剩余车位\"],\n    labels: topLabels,\n    data: [topValues]\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 720,
        "wires": [
            [
                "3adbe3bac930cf46",
                "5c97ce41727fedcf"
            ]
        ]
    },
    {
        "id": "3adbe3bac930cf46",
        "type": "ui_chart",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "group": "442e50534e7c4c73",
        "order": 2,
        "width": "8",
        "height": "8.5",
        "label": "剩余车位最多的区域",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "0.5",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 960,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8601c3d3477580b8",
        "type": "debug",
        "z": "5c4d021625f6fb1a",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 660,
        "wires": []
    },
    {
        "id": "56c54347a131ae1c",
        "type": "inject",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 860,
        "wires": [
            [
                "f3232c1688f40560"
            ]
        ]
    },
    {
        "id": "f3232c1688f40560",
        "type": "http request",
        "z": "5c4d021625f6fb1a",
        "name": "http request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.csdi.gov.hk/apim/dataquery/api/?id=td_rcd_1638930345315_81787&layer=parkingspaces&limit=1000&offset=0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 860,
        "wires": [
            [
                "e6711ef8e2a40a84"
            ]
        ]
    },
    {
        "id": "1de496451b94f504",
        "type": "mongodb3 in",
        "z": "5c4d021625f6fb1a",
        "service": "_ext_",
        "configNode": "ecc26120.5c01a8",
        "name": "",
        "collection": "ParkingSpace",
        "operation": "insert",
        "x": 770,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e6711ef8e2a40a84",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "改日期类型",
        "func": "if(msg.payload && msg.payload.timeStamp) {\n    msg.payload.timeStamp = new Date(msg.payload.timeStamp);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            [
                "1de496451b94f504"
            ]
        ]
    },
    {
        "id": "ce1c0997fd4647f6",
        "type": "inject",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "660",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 940,
        "wires": [
            [
                "cfac68f7fc9074dc"
            ]
        ]
    },
    {
        "id": "eaed1e2d1d247c74",
        "type": "mongodb3 in",
        "z": "5c4d021625f6fb1a",
        "service": "_ext_",
        "configNode": "ecc26120.5c01a8",
        "name": "",
        "collection": "ParkingSpace",
        "operation": "findOne",
        "x": 220,
        "y": 1040,
        "wires": [
            [
                "091e4dc4d4a570a9",
                "82350cfc66d4dd91",
                "34f2e1d04e80ea14",
                "28b9acc53f671a44",
                "563f6f634d937229"
            ]
        ]
    },
    {
        "id": "cfac68f7fc9074dc",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "查询条件时间降序",
        "func": "msg.payload = [\n    {\n        \"$query\": {}\n    },\n    {\n        \"sort\": {\n            \"timeStamp\": -1\n        }\n    }\n]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 990,
        "wires": [
            [
                "eaed1e2d1d247c74"
            ]
        ]
    },
    {
        "id": "091e4dc4d4a570a9",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "当前时间",
        "func": "var timeStampDate = new Date(msg.payload.timeStamp);\nvar targetTimeZoneOffset = 8;\nvar utcOffset = -timeStampDate.getTimezoneOffset() / 60;\n\ntimeStampDate.setHours(timeStampDate.getHours() + targetTimeZoneOffset - utcOffset);\n\nvar dateString = timeStampDate.toISOString().substring(0, 10);\nvar timeString = timeStampDate.toTimeString().substring(0, 8);\n\nvar update = dateString + \" \" + timeString;\n\nmsg.payload = update;\nmsg.topic = \"time\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 980,
        "wires": [
            [
                "779bf76238361396"
            ]
        ]
    },
    {
        "id": "82350cfc66d4dd91",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获得坐标",
        "func": "const features = msg.payload.features;\nvar coordinatesArray = [];\nfor (var i = 0; i < features.length; i++) {\n    const coordinates = features[i].geometry.coordinates;\n    coordinatesArray.push({\n        longitude: coordinates[0],\n        latitude: coordinates[1]\n    });\n}\nmsg.payload = coordinatesArray;\nmsg.topic = \"coordinates\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1020,
        "wires": [
            [
                "779bf76238361396"
            ]
        ]
    },
    {
        "id": "34f2e1d04e80ea14",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "获取车位名称&id",
        "func": "// const features = msg.payload.features;\n// var namesArray = [];\n// for (var i = 0; i < features.length; i++) {\n//     const properties = features[i].properties;\n//     let Region_sc=properties.Region_sc\n//     let Region=properties.Region\n//     let name_sc =properties.District_sc + properties.SubDistrict_sc + properties.Street_sc+properties.SectionOfStreet_sc\n//     let name =properties.District + properties.SubDistrict + properties.Street+properties.SectionOfStreet\n//     namesArray.push({\n//         region_sc:Region_sc,\n//         region: Region,\n//         names_sc: name_sc,\n//         names: name,\n//         ids:properties.ParkingSpaceId,\n//         leids:properties.PoleId\n//     });\n// }\n// msg.payload = namesArray;\n// msg.topic = \"names&id\";\n// return msg;\nconst features = msg.payload.features;\nconst namesArray = features.map((feature, index) => {\n    const properties = feature.properties;\n    const {\n        Region_sc,\n        Region,\n        District_sc,\n        SubDistrict_sc,\n        Street_sc,\n        SectionOfStreet_sc,\n        District,\n        SubDistrict,\n        Street,\n        SectionOfStreet,\n        ParkingSpaceId,\n        PoleId\n    } = properties;\n\n    const name_sc = `${District_sc}${SubDistrict_sc}${Street_sc}${SectionOfStreet_sc}`;\n    const name = `${District}${SubDistrict}${Street}${SectionOfStreet}`;\n\n    return {\n        region_sc: Region_sc,\n        region: Region,\n        names_sc: name_sc,\n        names: name, // 假设names是name_sc和name的组合\n        psids: ParkingSpaceId,\n        poleids: PoleId\n    };\n});\n\nmsg.payload = namesArray;\nmsg.topic = \"names\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "779bf76238361396"
            ]
        ]
    },
    {
        "id": "28b9acc53f671a44",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "车位信息",
        "func": "const features = msg.payload.features;\nvar SpaceInfo = [];\nfor (var i = 0; i < features.length; i++) {\n    const properties = features[i].properties;\n    SpaceInfo.push({\n        VehicleTypes: properties.VehicleType,\n        LPPs: properties.LPP,\n        OperatingPeriods: properties.OperatingPeriod,\n        TimeUnits: properties.TimeUnit,\n        PaymentUnits: properties.PaymentUnit\n\n\n    });\n}\nmsg.payload = SpaceInfo;\nmsg.topic = \"SpaceInfo\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "779bf76238361396"
            ]
        ]
    },
    {
        "id": "779bf76238361396",
        "type": "join",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "657b72936a193970"
            ]
        ]
    },
    {
        "id": "46cbe263f006d896",
        "type": "mongodb3 in",
        "z": "5c4d021625f6fb1a",
        "service": "_ext_",
        "configNode": "ecc26120.5c01a8",
        "name": "",
        "collection": "ParkingSpaceCSV",
        "operation": "findOne",
        "x": 630,
        "y": 1160,
        "wires": [
            [
                "993927f7538d0b5f"
            ]
        ]
    },
    {
        "id": "c2321b8ffed0ef25",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "query",
        "func": "// msg.payload = [\n//     {\n//         \"$query\": {ParkingSpaceId}\n//     },\n//     // :msg.payload.psids\n//     // {\n//     //     \"sort\": {\n//     //         \"timeStamp\": -1\n//     //     }\n//     // }\n// ]msg.payload.psids\n// if (msg.payload.charCodeAt(0) === 0xFEFF) {\n//     msg.payload = msg.payload.substr(1);\n// }\n//\\ufeff\nconst query = { \"\\ufeffParkingSpaceId\":msg.payload.psids};\nmsg.payload = query\nmsg.query = query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1160,
        "wires": [
            [
                "46cbe263f006d896"
            ]
        ]
    },
    {
        "id": "563f6f634d937229",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "pre process",
        "func": "\nconst features = msg.payload.features;\nvar psidsArray = [];\n\nfor (var i = 0; i < features.length; i++) {\n    const properties = features[i].properties;\n    psidsArray.push({\n        psids:properties.ParkingSpaceId\n    });\n}\nmsg.payload = psidsArray;\nmsg.topic = \"ids\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "add2e8f3348d1fc3"
            ]
        ]
    },
    {
        "id": "993927f7538d0b5f",
        "type": "join",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "1000",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 840,
        "y": 1160,
        "wires": [
            [
                "dd7ee373619ad41f"
            ]
        ]
    },
    {
        "id": "add2e8f3348d1fc3",
        "type": "split",
        "z": "5c4d021625f6fb1a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "c2321b8ffed0ef25"
            ]
        ]
    },
    {
        "id": "657b72936a193970",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "停车场信息",
        "func": "\nlet coordinates = msg.payload.coordinates || [];\nlet names = msg.payload.names || [];\nlet SpaceInfo = msg.payload.SpaceInfo || [];\nlet info = msg.payload.info || [];\n// let coordinates = msg.payload.coordinates;\n// let names = msg.payload.names;\n// let SpaceInfo = msg.payload.SpaceInfo;\n// let info = msg.payload.info;\nconst vehicleTypes = {\n    \"A\": \"任何车辆\",\n    \"C\": \"长途汽车\",\n    \"G\": \"货车\"\n};\nconst operatingPeriods = {\n    \"E\": \"每天 07:00 am - 08:00 pm\",\n    \"H\": \"每天 08:00 am - 08:00 pm\",\n    \"S\": \"周一至周五 08:00 am - 05:00 pm 禁止停车；周一至周五 05:00 pm - 午夜；周六 08:00 am - 午夜；周日和公众假期 10:00 am - 10:00 pm\",\n    \"B\": \"周一至周六 08:00 am - 08:00 pm（周日和公众假期除外）\",\n    \"D\": \"周一至周六 08:00 am - 午夜；周日和公众假期 10:00 am - 10:00 pm\",\n    \"F\": \"每天 08:00 am - 09:00 pm\",\n    \"J\": \"每天 08:00 am - 午夜\",\n    \"N\": \"每天 07:00 pm - 午夜\",\n    \"P\": \"周一至周六 08:00 am - 08:00 pm（周日禁止停车）\",\n    \"Q\": \"周一至周六 08:00 am - 08:00 pm；周日和公众假期 10:00 am - 10:00 pm\",\n    \"A\": \"周一至周六 08:00 am - 午夜（周日和公众假期除外）\"\n};\n\nlet mapMessages = coordinates.map((coord, index) => {\n    // 使用属性访问方式\n    // let latitude = coord.latitude;\n    // let longitude = coord.longitude;\n    // let nameItem = names[index];\n    // let spaceInfoItem = SpaceInfo[index];\n    // let infoItem = info[index];\n\n    // 检查当前索引的属性是否存在\n    // if (!nameItem || !SpaceInfo[index] || !infoItem) {\n    //     console.error(`Data missing at index ${index}`);\n    //     return null; // 返回null以跳过这个索引\n    // }\n\n    // let region_sc = nameItem.region_sc;\n    // let region = nameItem.region;\n    let names_sc = names[index].names_sc;\n    let VehicleTypes = SpaceInfo[index].VehicleTypes;\n    let LPPs = SpaceInfo[index].LPPs;\n    let OperatingPeriods = SpaceInfo[index].OperatingPeriods;\n    let TimeUnits = SpaceInfo[index].TimeUnits;\n    let PaymentUnits = SpaceInfo[index].PaymentUnits;\n    let ParkingMeterStatus = info[index].ParkingMeterStatus;\n    // let ParkingSpaceId = info[index].ParkingSpaceId;\n    let OccupancyStatus = info[index].OccupancyStatus|| \"暂无数据\";\n    let OccupancyDateChanged = info[index].OccupancyDateChanged|| \"暂无数据\";\n\n    let vehicleTypeName = vehicleTypes[VehicleTypes]|| \"暂无数据\";\nlet operatingPeriod = operatingPeriods[OperatingPeriods] || \"暂无数据\";    let lpp = LPPs + \"分钟\";\n    let timeUnit = TimeUnits + \"分钟\";\n    let paymentUnit = PaymentUnits + \"元\";\n\n    let occupancyStatusText = OccupancyStatus === \"V\" ? \"空余\" : \"已满\";\n    let iconColor = OccupancyStatus === \"V\" ? \"green\" : \"red\";\n\n    let popupContent = `\n        <strong>${names[index].names}</strong><br>\n        ID: ${names[index].psids}<br>\n        车辆类型：${vehicleTypeName}<br>\n        最长泊车时间：${lpp}<br>\n        收费时段：${operatingPeriod}<br>\n        最少购买时间单位：${timeUnit}<br>\n        每个时间单位价格：${paymentUnit}<br>\n        状态：${occupancyStatusText}<br>\n        更新时间：${OccupancyDateChanged}<br>\n    `;\n    return {\n        \"name\": names_sc,\n        \"lat\": coord.latitude,\n        \"lon\": coord.longitude,\n        \"layer\": \"Parking\",\n        \"icon\": \"car\",\n        \"iconColor\": iconColor,\n        \"popup\": popupContent,\n    };\n});\n\nreturn [mapMessages.map(msg => { return { payload: msg }; })];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1020,
        "wires": [
            [
                "2295d944a7c3a5e9",
                "f7ce3fcb8c656310"
            ]
        ]
    },
    {
        "id": "dd7ee373619ad41f",
        "type": "function",
        "z": "5c4d021625f6fb1a",
        "name": "function 6",
        "func": "msg.topic = \"info\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1100,
        "wires": [
            [
                "779bf76238361396"
            ]
        ]
    },
    {
        "id": "2295d944a7c3a5e9",
        "type": "debug",
        "z": "5c4d021625f6fb1a",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1020,
        "wires": []
    }
]